import random
import sqlite3
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ì–†–´ ==========
DUNGEON_ENERGY_MAX = 120
DUNGEON_ENERGY_COST = 20
GACHA_COST = 100
GACHA_10_COST = 900
GACHA_4STAR_GUARANTEE = 10
GACHA_5STAR_GUARANTEE = 50

# –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
CHARACTERS = {
    "–°–æ—Å–∞—Ç–∞ –ö–æ–º–∏—Å–∞—Ç–∞": {
        "rarity": 5,
        "element": "‚ö° –≠–ª–µ–∫—Ç—Ä–æ",
        "abilities": ["–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–µ–∑", "–ü–µ—Å–æ—á–Ω—ã–π —â–∏—Ç", "–ö–∞–∑–Ω—å –ö—Ä–æ–Ω–æ—Å–∞"],
        "stats": {"base_attack": 30, "base_hp": 150},
        "emoji": "üëë",
        "ascension": ["–°–ª–µ–∑–∞ –≤—Ä–µ–º–µ–Ω–∏", "–ü–µ—Å–æ–∫ –≤–µ—á–Ω–æ—Å—Ç–∏", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ"]
    },
    "–õ–∞–π—Ç –ö–æ—à–∏": {
        "rarity": 5,
        "element": "üå™Ô∏è –ê–Ω–µ–º–æ",
        "abilities": ["–ú–∏—Ä–∞–∂ –∫–ª–∏–Ω–∫–æ–≤", "–û–±–º–∞–Ω —Å—É–¥—å–±—ã", "–§–∞–ª—å—à–∏–≤—ã–π —É–¥–∞—Ä"],
        "stats": {"base_attack": 28, "base_hp": 130},
        "emoji": "üé≠",
        "ascension": ["–û–±–º–∞–Ω—á–∏–≤—ã–π —É–∑–æ—Ä", "–§—Ä–∞–≥–º–µ–Ω—Ç –∏–ª–ª—é–∑–∏–∏", "–ö—Ä—ã–ª–æ –±–∞–±–æ—á–∫–∏"]
    },
    "–ö–∞—Å–∞ –≠–±–∞—Ä–¥–æ–≤": {
        "rarity": 4,
        "element": "üíß –ì–∏–¥—Ä–æ",
        "abilities": ["–ó–∞–ø–æ–∑–¥–∞–ª—ã–π —É–¥–∞—Ä", "–ñ–∞–ª–æ–±–∞ –±–æ–≥–∞–º", "–°–ª—É—á–∞–π–Ω—ã–π –±–ª–æ–∫"],
        "stats": {"base_attack": 20, "base_hp": 180},
        "emoji": "üõ°Ô∏è",
        "ascension": ["–ö–∞–ø–ª—è —Ä–æ—Å—ã", "–†–∞–∫–æ–≤–∏–Ω–∞ –º–æ–ª–ª—é—Å–∫–∞", "–ö–æ—Ä–∞–ª–ª"]
    }
}

# –ú–æ–Ω—Å—Ç—Ä—ã
MONSTERS = [
    {"name": "–ü–µ—Å–æ—á–Ω—ã–π —á–µ—Ä–≤—å", "hp": 50, "attack": 5, "emoji": "ü™±"},
    {"name": "–•—Ä–æ–Ω–æ-–ø—Ä–∏–∑—Ä–∞–∫", "hp": 120, "attack": 8, "emoji": "üëª"},
    {"name": "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω", "hp": 300, "attack": 15, "emoji": "ü§ñ"},
    {"name": "–¢–µ–Ω—å –ö—Ä–æ–Ω–æ—Å–∞", "hp": 1000, "attack": 25, "emoji": "üë§"}
]

# –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (–î–∏–∫–æ–≤–∏–Ω—ã)
ARTIFACT_SETS = {
    "–ü–µ—Å–æ—á–Ω—ã–µ –ß–∞—Å—ã": {
        "emoji": "‚è≥",
        "2pc": "HP +15%",
        "4pc": "–£—Ä–æ–Ω +25% –µ—Å–ª–∏ HP > 70%",
        "main_stats": {
            "chain": ["HP%", "ATK%"],
            "crown": ["CRIT Rate%", "CRIT DMG%"],
            "boots": ["Elemental DMG%"]
        },
        "sub_stats": ["HP", "ATK", "CRIT Rate%", "CRIT DMG%"]
    },
    "–û–±–º–∞–Ω–Ω—ã–π –ú–∏—Ä–∞–∂": {
        "emoji": "üå™Ô∏è",
        "2pc": "CRIT Rate +12%",
        "4pc": "CRIT DMG +30% –ø–æ—Å–ª–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (10—Å–µ–∫)",
        "main_stats": {
            "chain": ["ATK%", "HP%"],
            "crown": ["CRIT DMG%", "CRIT Rate%"],
            "boots": ["Elemental DMG%"]
        },
        "sub_stats": ["ATK%", "HP", "CRIT Rate%", "CRIT DMG%"]
    },
    "–ö–ª—ã–∫–∏ –í–µ—á–Ω–æ—Å—Ç–∏": {
        "emoji": "üî±",
        "2pc": "Elemental DMG +15%",
        "4pc": "ATK +25% –ø—Ä–æ—Ç–∏–≤ 2+ –≤—Ä–∞–≥–æ–≤",
        "main_stats": {
            "chain": ["ATK%", "HP%"],
            "crown": ["CRIT Rate%", "CRIT DMG%"],
            "boots": ["Elemental DMG%"]
        },
        "sub_stats": ["ATK", "HP%", "CRIT Rate%", "CRIT DMG%"]
    }
}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    conn = sqlite3.connect('battle_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY,
                   username TEXT,
                   currency INTEGER DEFAULT 0,
                   energy INTEGER DEFAULT 120,
                   energy_time INTEGER DEFAULT 0,
                   characters TEXT DEFAULT '{}',
                   artifacts TEXT DEFAULT '[]',
                   equipped TEXT DEFAULT '{}',
                   stats TEXT DEFAULT '{"attack": 10, "hp": 100, "crit_rate": 5, "crit_dmg": 50}',
                   dungeon_progress TEXT DEFAULT '{"sands": 1, "mirage": 0, "fangs": 0}',
                   pity_4star INTEGER DEFAULT 0,
                   pity_5star INTEGER DEFAULT 0,
                   is_guaranteed BOOLEAN DEFAULT FALSE)''')
    
    conn.commit()
    conn.close()

init_db()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_user_data(user_id):
    conn = sqlite3.connect('battle_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if not user:
        default_data = (
            user_id, "", 0, 120, int(time.time()), 
            '{}', '[]', '{}', 
            '{"attack": 10, "hp": 100, "crit_rate": 5, "crit_dmg": 50}',
            '{"sands": 1, "mirage": 0, "fangs": 0}',
            0, 0, False
        )
        conn = sqlite3.connect('battle_bot.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', default_data)
        conn.commit()
        conn.close()
        return default_data
    return user

def update_user_data(user_id, **kwargs):
    conn = sqlite3.connect('battle_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = dict(zip(
        ['user_id', 'username', 'currency', 'energy', 'energy_time', 
         'characters', 'artifacts', 'equipped', 'stats', 
         'dungeon_progress', 'pity_4star', 'pity_5star', 'is_guaranteed'],
        get_user_data(user_id)
    ))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for key, value in kwargs.items():
        if key in current_data:
            current_data[key] = value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    cursor.execute('''UPDATE users SET
                   username = ?,
                   currency = ?,
                   energy = ?,
                   energy_time = ?,
                   characters = ?,
                   artifacts = ?,
                   equipped = ?,
                   stats = ?,
                   dungeon_progress = ?,
                   pity_4star = ?,
                   pity_5star = ?,
                   is_guaranteed = ?
                   WHERE user_id = ?''',
                   (current_data['username'], current_data['currency'], 
                    current_data['energy'], current_data['energy_time'],
                    current_data['characters'], current_data['artifacts'],
                    current_data['equipped'], current_data['stats'],
                    current_data['dungeon_progress'], current_data['pity_4star'],
                    current_data['pity_5star'], current_data['is_guaranteed'],
                    user_id))
    
    conn.commit()
    conn.close()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update_user_data(user.id, username=user.username)
    
    text = (
        "‚öîÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fates of Kronos!*\n\n"
        "–í—ã - –ë–µ–∑–ª–∏–∫–∏–π, –≤–æ–∏–Ω —Å –ø—Ä–æ–±—É–¥–∏–≤—à–∏–º—Å—è –•—Ä–æ–Ω–æ-–ö–ª–∏–Ω–∫–æ–º.\n"
        "–°—Ä–∞–∂–∞–π—Ç–µ—Å—å —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏, –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –º–æ—â–Ω—ã–µ –î–∏–∫–æ–≤–∏–Ω—ã!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–æ–π", callback_data="battle")],
        [InlineKeyboardButton("üè∞ –ü–æ–¥–∑–µ–º–µ–ª—å—è –î–∏–∫–æ–≤–∏–Ω", callback_data="dungeon_menu")],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ–º–æ—â–∏", callback_data="gacha_menu")],
        [InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", callback_data="characters")]
    ]
    
    update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ========== –°–ò–°–¢–ï–ú–ê –ë–û–Ø ==========
def start_battle(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–Ω—Å—Ç—Ä–∞
    dungeon_progress = eval(user_data[8])
    monster_level = dungeon_progress['sands'] + dungeon_progress['mirage'] + dungeon_progress['fangs']
    monster = random.choice(MONSTERS)
    monster_hp = monster['hp'] * (1 + monster_level * 0.2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_monster'] = {
        'name': monster['name'],
        'hp': monster_hp,
        'max_hp': monster_hp,
        'attack': monster['attack'],
        'emoji': monster['emoji']
    }
    
    text = (
        f"–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ *{monster['name']}* {monster['emoji']}!\n"
        f"HP: {int(monster_hp)}/{int(monster_hp)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
        [InlineKeyboardButton("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", callback_data="skill")],
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ë–µ–∂–∞—Ç—å", callback_data="run")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def attack_monster(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    stats = eval(user_data[7])
    monster = context.user_data['current_monster']
    
    # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
    crit_roll = random.randint(1, 100)
    is_crit = crit_roll <= stats['crit_rate']
    damage = stats['attack'] * (2 if is_crit else 1) * (1 + stats.get('crit_dmg', 0)/100 if is_crit else 1)
    
    # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
    monster['hp'] -= damage
    context.user_data['current_monster'] = monster
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if monster['hp'] <= 0:
        reward = random.randint(20, 50)
        update_user_data(
            user_id,
            currency=user_data[2] + reward
        )
        
        text = (
            f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ *{int(damage)}* —É—Ä–æ–Ω–∞ ({'–ö–†–ò–¢!' if is_crit else ''})\n"
            f"*{monster['name']}* –ø–æ–≤–µ—Ä–∂–µ–Ω!\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: *{reward}* –≤–∞–ª—é—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ù–æ–≤—ã–π –±–æ–π", callback_data="battle")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        # –û—Ç–≤–µ—Ç–Ω—ã–π —É–¥–∞—Ä –º–æ–Ω—Å—Ç—Ä–∞
        player_hp = stats['hp'] - monster['attack']
        stats['hp'] = max(0, player_hp)
        update_user_data(user_id, stats=str(stats))
        
        if stats['hp'] <= 0:
            text = (
                f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ *{int(damage)}* —É—Ä–æ–Ω–∞\n"
                f"üíÄ *{monster['name']}* —É–±–∏–ª –≤–∞—Å!\n\n"
                "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å–µ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öîÔ∏è –ù–æ–≤—ã–π –±–æ–π", callback_data="battle")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = (
                f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ *{int(damage)}* —É—Ä–æ–Ω–∞ ({'–ö–†–ò–¢!' if is_crit else ''})\n"
                f"‚ù§Ô∏è –í–∞—à–µ HP: *{int(stats['hp'])}*/{int(stats.get('max_hp', 100))}\n"
                f"üêæ {monster['name']} HP: *{int(monster['hp'])}*/{int(monster['max_hp'])}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
                [InlineKeyboardButton("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", callback_data="skill")],
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ë–µ–∂–∞—Ç—å", callback_data="run")]
            ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ========== –ü–û–î–ó–ï–ú–ï–õ–¨–Ø –ò –î–ò–ö–û–í–ò–ù–´ ==========
def dungeon_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    dungeon_progress = eval(user_data[8])
    
    text = (
        "üè∞ *–ü–æ–¥–∑–µ–º–µ–ª—å—è –î–∏–∫–æ–≤–∏–Ω*\n\n"
        "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—â–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.\n"
        f"üîã –≠–Ω–µ—Ä–≥–∏—è: *{user_data[3]}/{DUNGEON_ENERGY_MAX}*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"‚è≥ –ü–µ—Å–æ—á–Ω—ã–µ –ß–∞—Å—ã (–£—Ä. {dungeon_progress['sands']})", callback_data="dungeon_sands")],
        [InlineKeyboardButton(f"üå™Ô∏è –û–±–º–∞–Ω–Ω—ã–π –ú–∏—Ä–∞–∂ (–£—Ä. {dungeon_progress['mirage']})", callback_data="dungeon_mirage")],
        [InlineKeyboardButton(f"üî± –ö–ª—ã–∫–∏ –í–µ—á–Ω–æ—Å—Ç–∏ (–£—Ä. {dungeon_progress['fangs']})", callback_data="dungeon_fangs")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def run_dungeon(update: Update, context: CallbackContext, dungeon_type):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data[3] < DUNGEON_ENERGY_COST:
        query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    artifact_set = ARTIFACT_SETS[dungeon_type]
    piece_type = random.choice(["chain", "crown", "boots"])
    main_stat = random.choice(artifact_set["main_stats"][piece_type])
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    new_artifact = {
        "set": dungeon_type,
        "type": piece_type,
        "main_stat": main_stat,
        "sub_stats": random.sample(artifact_set["sub_stats"], 2),
        "level": 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    artifacts = eval(user_data[6])
    artifacts.append(new_artifact)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    dungeon_progress = eval(user_data[8])
    if dungeon_type == "–ü–µ—Å–æ—á–Ω—ã–µ –ß–∞—Å—ã":
        dungeon_progress['sands'] += 1
    elif dungeon_type == "–û–±–º–∞–Ω–Ω—ã–π –ú–∏—Ä–∞–∂":
        dungeon_progress['mirage'] += 1
    else:
        dungeon_progress['fangs'] += 1
    
    update_user_data(
        user_id,
        energy=user_data[3] - DUNGEON_ENERGY_COST,
        artifacts=str(artifacts),
        dungeon_progress=str(dungeon_progress)
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üèÜ *–í—ã –ø–æ–ª—É—á–∏–ª–∏:*\n"
        f"{artifact_set['emoji']} *{dungeon_type}*\n"
        f"–¢–∏–ø: *{piece_type}*\n"
        f"–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç: *{main_stat}*\n"
        f"–î–æ–ø. —Å—Ç–∞—Ç—ã: *{', '.join(new_artifact['sub_stats'])}*\n\n"
        f"üîã –≠–Ω–µ—Ä–≥–∏—è: *{user_data[3] - DUNGEON_ENERGY_COST}/{DUNGEON_ENERGY_MAX}*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üè∞ –ï—â—ë –∑–∞—Ö–æ–¥", callback_data=f"dungeon_{dungeon_type}")],
        [InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ========== –ì–ê–ß–ê –°–ò–°–¢–ï–ú–ê ==========
def gacha_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    text = (
        "üîé *–ü–æ–∏—Å–∫ –ø–æ–º–æ—â–∏*\n\n"
        "–ü—Ä–∏–∑—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤, —Ç—Ä–∞—Ç—è –≤–∞–ª—é—Ç—É.\n"
        f"üí∞ –í–∞–ª—é—Ç–∞: *{user_data[2]}*\n\n"
        f"–ì–∞—Ä–∞–Ω—Ç 4‚òÖ —á–µ—Ä–µ–∑: *{GACHA_4STAR_GUARANTEE - user_data[10]} –∫—Ä—É—Ç–æ–∫*\n"
        f"–ì–∞—Ä–∞–Ω—Ç 5‚òÖ —á–µ—Ä–µ–∑: *{GACHA_5STAR_GUARANTEE - user_data[11]} –∫—Ä—É—Ç–æ–∫*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîé –ö—Ä—É—Ç–∏—Ç—å 1 —Ä–∞–∑ (100)", callback_data="gacha_1")],
        [InlineKeyboardButton("üéâ –ö—Ä—É—Ç–∏—Ç—å 10 —Ä–∞–∑ (900)", callback_data="gacha_10")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def gacha_pull(update: Update, context: CallbackContext, pulls=1):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data[2] < (GACHA_COST * pulls if pulls == 1 else GACHA_10_COST):
        query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã!", show_alert=True)
        return
    
    results = []
    pity_4star = user_data[10]
    pity_5star = user_data[11]
    is_guaranteed = user_data[12]
    
    for _ in range(pulls):
        pity_4star += 1
        pity_5star += 1
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 4‚òÖ
        if pity_4star >= GACHA_4STAR_GUARANTEE:
            char_name = "–ö–∞—Å–∞ –≠–±–∞—Ä–¥–æ–≤"
            rarity = 4
            pity_4star = 0
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 5‚òÖ
        elif pity_5star >= GACHA_5STAR_GUARANTEE:
            char_name = "–°–æ—Å–∞—Ç–∞ –ö–æ–º–∏—Å–∞—Ç–∞" if not is_guaranteed or random.random() < 0.5 else "–õ–∞–π—Ç –ö–æ—à–∏"
            rarity = 5
            pity_5star = 0
            is_guaranteed = not is_guaranteed if char_name == "–õ–∞–π—Ç –ö–æ—à–∏" else is_guaranteed
        else:
            roll = random.random() * 100
            if roll < 0.6:  # 5‚òÖ
                char_name = "–°–æ—Å–∞—Ç–∞ –ö–æ–º–∏—Å–∞—Ç–∞" if not is_guaranteed or random.random() < 0.5 else "–õ–∞–π—Ç –ö–æ—à–∏"
                rarity = 5
                pity_5star = 0
                is_guaranteed = not is_guaranteed if char_name == "–õ–∞–π—Ç –ö–æ—à–∏" else is_guaranteed
            elif roll < 5.7:  # 4‚òÖ
                char_name = "–ö–∞—Å–∞ –≠–±–∞—Ä–¥–æ–≤"
                rarity = 4
                pity_4star = 0
            else:  # 3‚òÖ (–ø—Ä–µ–¥–º–µ—Ç)
                char_name = "–°–ª–æ–º–∞–Ω–Ω—ã–π –∫–ª–∏–Ω–æ–∫"
                rarity = 3
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append({
            "name": char_name,
            "rarity": rarity,
            "emoji": CHARACTERS.get(char_name, {}).get("emoji", "üó°Ô∏è")
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        characters = eval(user_data[5])
        if char_name in CHARACTERS:
            characters[char_name] = characters.get(char_name, 0) + 1
            update_user_data(user_id, characters=str(characters))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_data(
        user_id,
        currency=user_data[2] - (GACHA_COST * pulls if pulls == 1 else GACHA_10_COST),
        pity_4star=pity_4star,
        pity_5star=pity_5star,
        is_guaranteed=is_guaranteed
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    text = "üéâ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä—É—Ç–æ–∫:*\n"
    for result in results:
        stars = "‚≠ê" * result["rarity"]
        text += f"{result['emoji']} {result['name']} {stars}\n"
    
    text += f"\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª—é—Ç—ã: *{user_data[2] - (GACHA_COST * pulls if pulls == 1 else GACHA_10_COST)}*"
    
    keyboard = [
        [InlineKeyboardButton("üîé –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë", callback_data="gacha_1")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ========== –ò–ù–í–ï–ù–¢–ê–†–¨ –ò –ì–ê–õ–ï–†–ï–Ø ==========
def inventory_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    text = (
        "üì¶ *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å*\n\n"
        f"üí∞ –í–∞–ª—é—Ç–∞: *{user_data[2]}*\n"
        f"üîã –≠–Ω–µ—Ä–≥–∏—è: *{user_data[3]}/{DUNGEON_ENERGY_MAX}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üéí –î–∏–∫–æ–≤–∏–Ω—ã", callback_data="artifacts_list")],
        [InlineKeyboardButton("üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", callback_data="characters")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def characters_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    characters = eval(user_data[5])
    
    text = "üë• *–ì–∞–ª–µ—Ä–µ—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*\n\n"
    keyboard = []
    
    for char_name, char_data in CHARACTERS.items():
        count = characters.get(char_name, 0)
        if count > 0:
            text += f"{char_data['emoji']} *{char_name}* (–£—Ä. {count})\n"
            keyboard.append([InlineKeyboardButton(
                f"{char_data['emoji']} {char_name}",
                callback_data=f"character_{char_name}"
            )])
    
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def show_character(update: Update, context: CallbackContext, character_name):
    query = update.callback_query
    update.callback_query
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    char_data = CHARACTERS[character_name]
    characters = eval(user_data[5])
    count = characters.get(character_name, 0)
    
    text = (
        f"{char_data['emoji']} *{character_name}*\n"
        f"‚òÖ {'‚≠ê' * char_data['rarity']}\n"
        f"–≠–ª–µ–º–µ–Ω—Ç: {char_data['element']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è: *{count}*\n\n"
        "*–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:*\n"
        f"- {char_data['abilities'][0]}\n"
        f"- {char_data['abilities'][1]}\n"
        f"- {char_data['abilities'][2]}\n\n"
        "*–ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã:*\n"
        f"- ATK: {char_data['stats']['base_attack'] * count}\n"
        f"- HP: {char_data['stats']['base_hp'] * count}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"equip_{character_name}")],
        [InlineKeyboardButton("üë• –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º", callback_data="characters")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
def main_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.edit_message_text(
        "‚öîÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–æ–π", callback_data="battle")],
            [InlineKeyboardButton("üè∞ –ü–æ–¥–∑–µ–º–µ–ª—å—è –î–∏–∫–æ–≤–∏–Ω", callback_data="dungeon_menu")],
            [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ–º–æ—â–∏", callback_data="gacha_menu")],
            [InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", callback_data="characters")]
        ]),
        parse_mode="Markdown"
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    
    if data == "main_menu":
        main_menu(update, context)
    elif data == "battle":
        start_battle(update, context)
    elif data == "attack":
        attack_monster(update, context)
    elif data == "dungeon_menu":
        dungeon_menu(update, context)
    elif data.startswith("dungeon_"):
        dungeon_type = data.split("_")[1]
        if dungeon_type == "sands":
            run_dungeon(update, context, "–ü–µ—Å–æ—á–Ω—ã–µ –ß–∞—Å—ã")
        elif dungeon_type == "mirage":
            run_dungeon(update, context, "–û–±–º–∞–Ω–Ω—ã–π –ú–∏—Ä–∞–∂")
        else:
            run_dungeon(update, context, "–ö–ª—ã–∫–∏ –í–µ—á–Ω–æ—Å—Ç–∏")
    elif data == "gacha_menu":
        gacha_menu(update, context)
    elif data == "gacha_1":
        gacha_pull(update, context, 1)
    elif data == "gacha_10":
        gacha_pull(update, context, 10)
    elif data == "inventory":
        inventory_menu(update, context)
    elif data == "characters":
        characters_menu(update, context)
    elif data.startswith("character_"):
        char_name = data.split("_")[1]
        show_character(update, context, char_name)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    updater = Updater("8068561650:AAFVlqaX1BiJRfSIqTNQ3DxzR6EAEYSOC0w", use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
